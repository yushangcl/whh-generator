package ${servicePackage}.impl;

#if($methods && $methods.size() > 0)
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.dangdang.ddframe.rdb.sharding.id.generator.IdGenerator;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.BeanUtils;
import org.springframework.util.CollectionUtils;
import java.util.*;
#if($lock)
import java.util.concurrent.TimeUnit;
#end
import java.util.stream.Collectors;
import ${base_package}.common.exception.BaseException;
#if($lock)
import ${commonPackage}.redisson.lock.LockManagerAnnotation;
import ${commonPackage}.redisson.lock.LockManagerUtil;
#end
import ${base_package}.admin.api.SysUserApi;
import ${base_package}.admin.base.vo.UserVo;
import ${commonPackage}.entity.Pager;
import ${commonPackage}.util.user.UserInfoUtil;
import ${base_package}.${model}.base.criteria.${tableInfo.beanName}Criteria;
#foreach($field in ${tableInfo.tableFields})
    #if(${field.filed} == "skuId")
import ${base_package}.sku.api.ProductApi;
import ${base_package}.sku.base.vo.SimpleProductVo;
    #end
    #if(${field.filed} == "warehouseId")
import ${base_package}.bdm.api.StoreHouseApi;
import ${base_package}.bdm.base.vo.StoreHouseVo;
    #end
    #if(${field.filed} == "customerId")
import ${base_package}.bdm.api.CustomerApi;
import ${base_package}.bdm.base.vo.CustomerVo;
    #end
#end
#end
import ${base_package}.common.enums.DeletedEnum;
import ${beanPackage}.${tableInfo.beanName};
import ${voPackage}.${tableInfo.beanName}Vo;
import ${mapperPackage}.${tableInfo.beanName}Mapper;
import ${servicePackage}.${tableInfo.beanName}Service;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;


/**
 * ${tableInfo.beanName}Service  ${tableInfo.tableComment}
 *
 * @author ${authorName} (;￢＿￢) 
 * @version ${version}
 * @date $date
 **/
@Slf4j
@Service("${tableInfo.shortBeanName}Service")
public class ${tableInfo.beanName}ServiceImpl implements ${tableInfo.beanName}Service {

    @Resource
    private ${tableInfo.beanName}Mapper ${tableInfo.shortBeanName}Mapper;
#if($methods && $methods.size() > 0)

    @Resource
    private SysUserApi sysUserApi;

    @Resource
    private IdGenerator idGenerator;
#foreach($field in ${tableInfo.tableFields})
    #if(${field.filed} == "skuId")

    @Resource
    private ProductApi productApi;
    #end
    #if(${field.filed} == "warehouseId")

    @Resource
    private StoreHouseApi storeHouseApi;
    #end
    #if(${field.filed} == "customerId")

    @Resource
    private CustomerApi customerApi;
    #end
#end
#end

    /**
     * 逻辑删除
     *
     * @param id 主键
     * @return 0/1
     */
    private Integer logicalDeletedById(Long id, Long userId) {
        ${tableInfo.beanName} ${tableInfo.shortBeanName} = new ${tableInfo.beanName}();
        ${tableInfo.shortBeanName}.setId(id);
        ${tableInfo.shortBeanName}.setUpdateUser(userId == null ? UserInfoUtil.getUserId() : userId);
        ${tableInfo.shortBeanName}.setDeleted(DeletedEnum.DELETED.getCode());
        return ${tableInfo.shortBeanName}Mapper.updateByPrimaryKeySelective(${tableInfo.shortBeanName});
    }

    @Override
    public ${tableInfo.beanName} selectById(Long id) {
        ${tableInfo.beanName} ${tableInfo.shortBeanName} = ${tableInfo.shortBeanName}Mapper.selectByPrimaryKey(id);
        if (${tableInfo.shortBeanName} == null || DeletedEnum.DELETED.getCode().equals(${tableInfo.shortBeanName}.getDeleted())) {
            return null;
        }
        return ${tableInfo.shortBeanName};
    }

    @Override
    public int insertSelectiveExcute(${tableInfo.beanName} ${tableInfo.shortBeanName}) {
        ${tableInfo.shortBeanName}.setDeleted(DeletedEnum.NORMAL.getCode());
        return testMapper.insertSelective(${tableInfo.shortBeanName});
    }

    @Override
    public int updateByIdExcute(${tableInfo.beanName} ${tableInfo.shortBeanName}, boolean hasSelective) {
        if (${tableInfo.shortBeanName}.getId() == null) {
            throw new BaseException("主键不存在！");
        }
        if (hasSelective) {
            return testMapper.updateByPrimaryKeySelective(${tableInfo.shortBeanName});
        }
        return testMapper.updateByPrimaryKey(${tableInfo.shortBeanName});
    }
#foreach($method in ${methods})
    #if(${method} == "selectVoByIds")

    @Override
    public List<${tableInfo.beanName}Vo> selectVoByIds(List<Long> ids) {
        if (CollectionUtils.isEmpty(ids)) {
            return null;
        }
        List<${tableInfo.beanName}> ${tableInfo.shortBeanName}s = ${tableInfo.shortBeanName}Mapper.selectByIdList(ids);
        return CollectionUtils.isEmpty(${tableInfo.shortBeanName}s) ? null : ${tableInfo.shortBeanName}s.stream().filter(l -> DeletedEnum.NORMAL.getCode().equals(l.getDeleted())).map(${tableInfo.beanName}Vo::new).collect(Collectors.toList());
    }
    #end
    #if(${method} == "selectVoMapByIds")

    @Override
    public Map<Long, ${tableInfo.beanName}Vo> selectVoMapByIds(List<Long> ids) {
        if (CollectionUtils.isEmpty(ids)) {
            return new HashMap<>(0);
        }
        List<${tableInfo.beanName}> ${tableInfo.shortBeanName}s = ${tableInfo.shortBeanName}Mapper.selectByIdList(ids);
        if (CollectionUtils.isEmpty(${tableInfo.shortBeanName}s)) {
            return new HashMap<>(0);
        }
        return ${tableInfo.shortBeanName}s.stream().filter(l -> DeletedEnum.NORMAL.getCode().equals(l.getDeleted())).collect(Collectors.toMap(${tableInfo.beanName}::getId, ${tableInfo.beanName}Vo::new, (k1, k2) -> k1));
    }
    #end
    #if(${method} == "list")

    @Override
    public PageInfo<${tableInfo.beanName}Vo> list(${tableInfo.beanName}Vo ${tableInfo.shortBeanName}Vo, Pager pager) {
        ${tableInfo.beanName}Criteria example = new ${tableInfo.beanName}Criteria();
        ${tableInfo.beanName}Criteria.Criteria criteria = example.createCriteria();
            criteria.andDeletedEqualTo(DeletedEnum.NORMAL.getCode());
        // 时间
        if (${tableInfo.shortBeanName}Vo.getStartTime() != null) {
            criteria.andCreateTimeGreaterThan(${tableInfo.shortBeanName}Vo.getStartTime());
        }
        if (${tableInfo.shortBeanName}Vo.getEndTime() != null) {
            criteria.andCreateTimeLessThan(${tableInfo.shortBeanName}Vo.getEndTime());
        }
        // 创建人
        if (${tableInfo.shortBeanName}Vo.getCreateUser() != null) {
            criteria.andCreateUserEqualTo(${tableInfo.shortBeanName}Vo.getCreateUser());
        }
        // 更新人
        if (${tableInfo.shortBeanName}Vo.getCreateUser() != null) {
            criteria.andCreateUserEqualTo(${tableInfo.shortBeanName}Vo.getCreateUser());
        }
    #foreach($field in ${tableInfo.tableFields})
        #if(${field.filed} == "status")
        if (${tableInfo.shortBeanName}Vo.getStatus() != null) {
            criteria.andStatusEqualTo(${tableInfo.shortBeanName}Vo.getStatus());
        }
        #end
        #if(${field.filed} == "type")
        if (${tableInfo.shortBeanName}Vo.getType() != null) {
            criteria.andTypeEqualTo(${tableInfo.shortBeanName}Vo.getType());
        }
        #end
        #if(${field.filed} == "warehouseId")
        if (${tableInfo.shortBeanName}Vo.getWarehouseId() != null) {
            criteria.andWarehouseIdEqualTo(${tableInfo.shortBeanName}Vo.getWarehouseId());
        }
        #end
        #if(${field.filed} == "customerId")
        if (${tableInfo.shortBeanName}Vo.getWarehouseId() != null) {
            criteria.andCustomerIdEqualTo(${tableInfo.shortBeanName}Vo.getCustomerId());
        }
        #end
    #end

        // todo
        example.setOrderByClause("update_time desc");
        if (pager != null) {
            if (null != pager.getPageSize() && null != pager.getPageIndex()) {
                PageHelper.startPage(pager.getPageIndex(), pager.getPageSize());
            }
        }
        List<${tableInfo.beanName}> ${tableInfo.shortBeanName}s = ${tableInfo.shortBeanName}Mapper.selectByExample(example);
        PageInfo<${tableInfo.beanName}> ${tableInfo.shortBeanName}PageInfo = new PageInfo<>(${tableInfo.shortBeanName}s);
        if (${tableInfo.shortBeanName}PageInfo.getTotal() == 0) {
            return new PageInfo<>();
        }
        PageInfo<${tableInfo.beanName}Vo> voPageInfo = new PageInfo<>();
        BeanUtils.copyProperties(${tableInfo.shortBeanName}PageInfo, voPageInfo);
        voPageInfo.setList(this.handle${tableInfo.beanName}Vos(${tableInfo.shortBeanName}PageInfo.getList()));
        return voPageInfo;
    }

    private List<${tableInfo.beanName}Vo> handle${tableInfo.beanName}Vos(List<${tableInfo.beanName}> ${tableInfo.shortBeanName}s) {
        List<Long> userIds = ${tableInfo.shortBeanName}s.stream().map(${tableInfo.beanName}::getCreateUser).distinct().collect(Collectors.toList());
        userIds.addAll(${tableInfo.shortBeanName}s.stream().map(${tableInfo.beanName}::getUpdateUser).distinct().collect(Collectors.toList()));
        Map<Long, UserVo> userVoMap = sysUserApi.getSysUserCacheMap(userIds);
#foreach($field in ${tableInfo.tableFields})
    #if(${field.filed} == "skuId")
        // sku信息
        List<Long> skuIds = ${tableInfo.shortBeanName}s.stream().map(${tableInfo.beanName}::getSkuId).distinct().collect(Collectors.toList());
        Map<Long, SimpleProductVo>  simpleProductVoMap = productApi.getSimpleProductMapBySkuIds(skuIds);
    #end
    #if(${field.filed} == "warehouseId")
        List<Long> warehouseIds = ${tableInfo.shortBeanName}s.stream().map(${tableInfo.beanName}::getWarehouseId).distinct().collect(Collectors.toList());
        Map<Long, StoreHouseVo> storeHouseCacheMap = storeHouseApi.getStoreHouseCacheMap(warehouseIds);
    #end
    #if(${field.filed} == "customerId")
        List<Long> customerIds = ${tableInfo.shortBeanName}s.stream().map(${tableInfo.beanName}::getCustomerId).distinct().collect(Collectors.toList());
        Map<Long, CustomerVo> customerMap = customerApi.getCustomerCacheMap(customerIds);
    #end
#end
        List<${tableInfo.beanName}Vo> ${tableInfo.shortBeanName}Vos = new ArrayList<>();
        for (${tableInfo.beanName} ${tableInfo.shortBeanName} : ${tableInfo.shortBeanName}s) {
            ${tableInfo.beanName}Vo ${tableInfo.shortBeanName}Vo = new ${tableInfo.beanName}Vo(${tableInfo.shortBeanName});
            // 创建人
            ${tableInfo.shortBeanName}Vo.setCreateUserDesc(userVoMap.get(${tableInfo.shortBeanName}.getCreateUser()).getUserName());
            ${tableInfo.shortBeanName}Vo.setUpdateUserDesc(userVoMap.get(${tableInfo.shortBeanName}.getUpdateUser()).getUserName());
   #foreach($field in ${tableInfo.tableFields})
       #if(${field.filed} == "skuId")
            // sku信息
           SimpleProductVo simpleProductVo = simpleProductVoMap.get(${tableInfo.shortBeanName}.getSkuId());
           if(simpleProductVo != null){
               ${tableInfo.shortBeanName}Vo.setSkuCode(simpleProductVo.getCode());
               ${tableInfo.shortBeanName}Vo.setSkuName(simpleProductVo.getName());
               ${tableInfo.shortBeanName}Vo.setUnitName(simpleProductVo.getMainUnitName());
           }
       #end
       #if(${field.filed} == "warehouseId")
           // 仓库信息
           StoreHouseVo storeHouseVo = storeHouseCacheMap.get(${tableInfo.shortBeanName}.getWarehouseId());
           if(storeHouseVo != null){
           ${tableInfo.shortBeanName}Vo.setWarehouseName(storeHouseVo.getStoreHouseName());
           }
       #end
       #if(${field.filed} == "customerId")
           // 客户信息
           CustomerVo customerVo = customerMap.get(${tableInfo.shortBeanName}.getCustomerId());
           if(customerVo != null){
           ${tableInfo.shortBeanName}Vo.setCustomerName(customerVo.getEcterpriseName());
           }
       #end
   #end
            // todo
            ${tableInfo.shortBeanName}Vos.add(${tableInfo.shortBeanName}Vo);
        }
        return ${tableInfo.shortBeanName}Vos;
    }
    #end
    #if(${method} == "getInfo")
    @Override
    public ${tableInfo.beanName}Vo getInfo(Long id) {
        ${tableInfo.beanName} ${tableInfo.shortBeanName} = this.selectById(id);
        if (${tableInfo.shortBeanName} == null) {
            throw new BaseException("主键不存在！");
        }
        ${tableInfo.beanName}Vo ${tableInfo.shortBeanName}Vo = new ${tableInfo.beanName}Vo(${tableInfo.shortBeanName});
        Map<Long, UserVo> userVoMap = sysUserApi.getSysUserCacheMap(Arrays.asList(${tableInfo.shortBeanName}.getCreateUser(), ${tableInfo.shortBeanName}.getUpdateUser()));
#foreach($field in ${tableInfo.tableFields})
    #if(${field.filed} == "skuId")
        // sku信息
        Map<Long, SimpleProductVo>  simpleProductVoMap = productApi.getSimpleProductMapBySkuIds(Collections.singletonList(${tableInfo.shortBeanName}.getSkuId()));
    #end
    #if(${field.filed} == "warehouseId")
        Map<Long, StoreHouseVo> storeHouseCacheMap = storeHouseApi.getStoreHouseCacheMap(Collections.singletonList(${tableInfo.shortBeanName}.getWarehouseId()));
    #end
    #if(${field.filed} == "customerId")
        Map<Long, CustomerVo> customerMap = customerApi.getCustomerCacheMap(Collections.singletonList(${tableInfo.shortBeanName}.getCustomerId()));
    #end
#end

        ${tableInfo.shortBeanName}Vo.setCreateUserDesc(userVoMap.get(${tableInfo.shortBeanName}.getCreateUser()).getUserName());
        ${tableInfo.shortBeanName}Vo.setCreateUserDesc(userVoMap.get(${tableInfo.shortBeanName}.getUpdateUser()).getUserName());
#foreach($field in ${tableInfo.tableFields})
    #if(${field.filed} == "skuId")
        // sku信息
        SimpleProductVo simpleProductVo = simpleProductVoMap.get(${tableInfo.shortBeanName}.getSkuId());
        if(simpleProductVo != null){
        ${tableInfo.shortBeanName}Vo.setSkuCode(simpleProductVo.getCode());
        ${tableInfo.shortBeanName}Vo.setSkuName(simpleProductVo.getName());
        ${tableInfo.shortBeanName}Vo.setUnitName(simpleProductVo.getMainUnitName());
        }
    #end
    #if(${field.filed} == "warehouseId")
        // 仓库信息
        StoreHouseVo storeHouseVo = storeHouseCacheMap.get(${tableInfo.shortBeanName}.getWarehouseId());
        if(storeHouseVo != null){
        ${tableInfo.shortBeanName}Vo.setWarehouseName(storeHouseVo.getStoreHouseName());
        }
    #end
    #if(${field.filed} == "customerId")
        // 客户信息
        CustomerVo customerVo = customerMap.get(${tableInfo.shortBeanName}.getCustomerId());
        if(customerVo != null){
        ${tableInfo.shortBeanName}Vo.setCustomerName(customerVo.getEcterpriseName());
        }
    #end
#end
        // todo
        return ${tableInfo.shortBeanName}Vo;
    }

    #end
    #if(${method} == "save")
    #if($lock)
    @LockManagerAnnotation()
    #end
    @Transactional(rollbackFor = Exception.class)
    @Override
    public void save(${tableInfo.beanName}Vo ${tableInfo.shortBeanName}Vo) {
        if (${tableInfo.shortBeanName}Vo.getId() == null) {
            this.add(${tableInfo.shortBeanName}Vo);
            return;
        }
        #if($lock)
        LockManagerUtil.tryLockAuto(null, ${tableInfo.shortBeanName}Vo.getId(), TimeUnit.SECONDS, 3, 120);
        #end
        this.edit(${tableInfo.shortBeanName}Vo);

    }

    private void add(${tableInfo.beanName}Vo ${tableInfo.shortBeanName}Vo) {
        // todo

        this.insertSelectiveExcute(${tableInfo.shortBeanName}Vo);
        if (log.isInfoEnabled()) {
        log.info("【${tableInfo.tableComment}】《新增操作》，主键：{}，详情：{}", ${tableInfo.shortBeanName}Vo.getId(), JSONObject.toJSONString(${tableInfo.shortBeanName}Vo));
        }
    }

    private void edit(${tableInfo.beanName}Vo ${tableInfo.shortBeanName}Vo) {
        ${tableInfo.beanName} ${tableInfo.shortBeanName} = this.selectById(${tableInfo.shortBeanName}Vo.getId());
        if (${tableInfo.shortBeanName} == null) {
            throw new BaseException("主键不存在！");
        }
        // todo

    }

    #end
    #if(${method} == "deleted")
    @Transactional(rollbackFor = Exception.class)
    @Override
    public void deleted(Long id) {
        // 判断状态是否能删除
        ${tableInfo.beanName} ${tableInfo.shortBeanName} = this.selectById(id);
        if (${tableInfo.shortBeanName} == null) {
            throw new BaseException("主键不存在！");
        }
        // todo

        Integer num = this.logicalDeletedById(id, UserInfoUtil.getUserId());
        if (log.isInfoEnabled()) {
        log.info("【${tableInfo.tableComment}】《删除操作》，主键：{}，数量：{}，操作人：{}", id, num, UserInfoUtil.getUserId());
        }
    }
    #end
#end
}